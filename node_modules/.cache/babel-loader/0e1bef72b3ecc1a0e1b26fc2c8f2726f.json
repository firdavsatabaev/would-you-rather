{"ast":null,"code":"var _jsxFileName = \"/home/firdavs/would-you-rather/src/components/HomePage/PollDetails.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ResultsCard from './ResultsCard';\nimport QuestionCard from './QuestionCard';\nimport NotFoundPage from '../NotFoundPage';\n/**\n * Functional component representing poll details component.\n * @param Refer to PropTypes\n */\n\nfunction PollDetails(props) {\n  const {\n    match: {\n      params\n    }\n  } = props;\n  const {\n    question_id\n  } = params;\n  const {\n    authedUser,\n    users,\n    questions\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, questions[question_id] ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, Object.keys(users[authedUser].answers).includes(question_id) ? /*#__PURE__*/React.createElement(ResultsCard, {\n    question_id: question_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(QuestionCard, {\n    question_id: question_id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(NotFoundPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }));\n}\n\nPollDetails.propTypes = {\n  authedUser: PropTypes.string.isRequired,\n  users: PropTypes.object.isRequired,\n  questions: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps({\n  authedUser,\n  users,\n  questions\n}) {\n  return {\n    authedUser,\n    users,\n    questions\n  };\n}\n\nexport default connect(mapStateToProps)(PollDetails);","map":{"version":3,"sources":["/home/firdavs/would-you-rather/src/components/HomePage/PollDetails.js"],"names":["React","connect","PropTypes","ResultsCard","QuestionCard","NotFoundPage","PollDetails","props","match","params","question_id","authedUser","users","questions","Object","keys","answers","includes","propTypes","string","isRequired","object","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA;;;;;AAIA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADH,MAEFF,KAFJ;AAGA,QAAM;AAAEG,IAAAA;AAAF,MAAkBD,MAAxB;AACA,QAAM;AAAEE,IAAAA,UAAF;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA;AAArB,MAAmCN,KAAzC;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGM,SAAS,CAACH,WAAD,CAAT,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACD,UAAD,CAAL,CAAkBK,OAA9B,EAAuCC,QAAvC,CAAgDP,WAAhD,iBACC,oBAAC,WAAD;AAAa,IAAA,WAAW,EAAEA,WAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,gBAGC,oBAAC,YAAD;AAAc,IAAA,WAAW,EAAEA,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADD,gBASC,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CADF;AAeD;;AAEDJ,WAAW,CAACY,SAAZ,GAAwB;AACtBP,EAAAA,UAAU,EAAET,SAAS,CAACiB,MAAV,CAAiBC,UADP;AAEtBR,EAAAA,KAAK,EAAEV,SAAS,CAACmB,MAAV,CAAiBD,UAFF;AAGtBP,EAAAA,SAAS,EAAEX,SAAS,CAACmB,MAAV,CAAiBD;AAHN,CAAxB;;AAMA,SAASE,eAAT,CAAyB;AAAEX,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAzB,EAA2D;AACzD,SAAO;AACLF,IAAAA,UADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;;AAED,eAAeZ,OAAO,CAACqB,eAAD,CAAP,CAAyBhB,WAAzB,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ResultsCard from './ResultsCard';\nimport QuestionCard from './QuestionCard';\nimport NotFoundPage from '../NotFoundPage';\n\n/**\n * Functional component representing poll details component.\n * @param Refer to PropTypes\n */\nfunction PollDetails(props) {\n  const {\n    match: { params },\n  } = props;\n  const { question_id } = params;\n  const { authedUser, users, questions } = props;\n\n  return (\n    <div>\n      {questions[question_id] ? (\n        <div>\n          {Object.keys(users[authedUser].answers).includes(question_id) ? (\n            <ResultsCard question_id={question_id} />\n          ) : (\n            <QuestionCard question_id={question_id} />\n          )}\n        </div>\n      ) : (\n        <NotFoundPage />\n      )}\n    </div>\n  );\n}\n\nPollDetails.propTypes = {\n  authedUser: PropTypes.string.isRequired,\n  users: PropTypes.object.isRequired,\n  questions: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps({ authedUser, users, questions }) {\n  return {\n    authedUser,\n    users,\n    questions,\n  };\n}\n\nexport default connect(mapStateToProps)(PollDetails);\n"]},"metadata":{},"sourceType":"module"}